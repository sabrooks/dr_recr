mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)))%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)))%>%
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)))%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), -Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
devtools::use_data(prod, overwrite = TRUE)
drrecr::eval_event(dr, prod)
library(drrecr)
library("assertthat", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
packrat::restore(prompt = FALSE)
library(caret)
install.packages(caret)
install.packages("caret")
packrat::restore(prompt = FALSE)
remove.packages("BoomSpikeSlab", lib="")
packrat::restore(prompt = FALSE)
install.packages("devtools")
install.packages("lubridate")
packrat::restore(prompt = FALSE)
install.packages("BoomSpikeSlab")
install.packages(bsts)
install.packages("bsts")
devtools::install(CausalImpact)
devtools::install("CausalImpact")
devtools::install_github("google/CausalImpact")
packrat::restore(prompt = FALSE)
remove.packages("CausalImpact", lib="")
remove.packages("brew", lib="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
remove.packages("BoomSpikeSlab", lib="")
remove.packages("BoomSpikeSlab", lib="")
packrat::restore(prompt = FALSE)
install("tidyr")
install.packages("tidyr")
install.packages("knitr")
packrat::restore(prompt = FALSE)
interval <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)%>%
dplyr::mutate(int = (lag(time.col)%--%time.col)/dminutes(1))
}
interval(prod, time)
library("dplyr", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
library(dplyr)
library(assertthat)
library(caret)
library(e1071)
library(tidyr)
interval(prod, time)
interval <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)%>%
dplyr::mutate(int = (lag(time)%--%time)/dminutes(1))
}
interval(prod, time)
prod
energy
interval(energy, Time)
library("lubridate", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
interval(energy, Time)
interval <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)%>%
dplyr::mutate(int = (lag(time)%--%time)/dminutes(1))%>%
dplyr::count(int)
return(df)
}
interval(energy, Time)
interval <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)
time.span <- df%>%
dplyr::summarize(min = min(time),
max = max(time))%>%
dplyr::mutate(min%--%max)
df%>%
dplyr::mutate(int = (lag(time)%--%time)/dminutes(1))%>%
dplyr::count(int)
results <- c(time.span = time.span,
df = df)
return(results)
}
interval(energy, Time)
interval <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)
time.span <- df%>%
dplyr::summarize(min = min(time),
max = max(time))%>%
dplyr::mutate(min%--%max)
df <-df%>%
dplyr::mutate(int = (lag(time)%--%time)/dminutes(1))%>%
dplyr::count(int)
results <- c(time.span = time.span,
df = df)
return(results)
}
interval(energy, Time)
interval <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)
time.span <- df%>%
dplyr::summarize(min = min(time),
max = max(time))%>%
dplyr::transmute(min%--%max)
df <-df%>%
dplyr::mutate(int = (lag(time)%--%time)/dminutes(1))%>%
dplyr::count(int)
results <- c(time.span = time.span,
df = df)
return(results)
}
interval(energy, Time)
library(dplyr)
library(assertthat)
library(caret)
library(e1071)
library(lubridate)
library(tidyr)
ar <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)%>%
gather(meter, energy, -time)%>%
dplyr::group_by(time)%>%
summarise(energy = sum(energy, na.rm = TRUE))%>%
select(-time)
acf(df)
}
ar(energy, Time)
prod
ar(prod, time)
ar(prod, `time`)
acf(prod)
acf(energy)
acf(prod)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), -Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)
View(prod)
acf(prod)
prod
prod$Time
prod$Time%>%mutate(time = myd_hm(time))
prod <- prod%>%mutate(time = myd_hm(time))
detach("package:lubridate", unload=TRUE)
library("lubridate", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
prod <- prod%>%mutate(time = myd_hm(time))
prod <- prod%>%mutate(time = mdy_hm(time))
prod <- prod%>%mutate(time = mdy_hm(time))
prod <- prod%>%mutate(Time = mdy_hm(Time))
prod
acf(prod)
ts(prod)
prod <- as.ts(prod)
acf(prod)
is.ts(prod)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), -Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
mutate(Time = mdy_hm(Time))
acf(prod)
prod%>%filter(!complete.cases(.))
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), -Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
filter(complete.cases(.))%>%
mutate(Time = mdy_hm(Time))
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), -Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
filter(complete.cases(.))%>%
mutate(Time = mdy_hm(Time))
acf(prod)
ts <- xts(prod, Time)
install.packages("xts")
ts <- xts(prod, Time)
library("xts", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
ts <- xts(prod, Time)
xts(energy%>%select(-Time), energy$Time)
ts <- xts(energy%>%select(-Time), energy$Time)
View(ts)
times <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)
ts <-xts(df%>%
dplyr::select(-time),
df$time)
}
times(energy, Time)
library(dplyr)
library(assertthat)
library(caret)
library(e1071)
library(lubridate)
library(tidyr)
prod%>%dplyr::summarise(min = min(Time), max = max(Time))
p <- prod%>%dplyr::summarise(min = min(Time), max = max(Time))
p$min
seq(p$min[1], p$max[1], by = '5 minute')
seq(p$min[1], p$max[1], by = 'minute')
seq(p$min[1], p$max[1], by = 'day')
seq(p$min[1], p$max[1], by = 'week')
p.int <- p$min[1]%--%p$max[1]
p.int%%dminutes(5)
p.int
p.int%/%dminutes(5)
minutes(5)
minutes(5:100)
minutes(5:100, 5)
dminutes(5)
jan31 %m+% minutes(5:100)
p$min[1] %m+% minutes(5:100)
p$min[1] %+% minutes(5:100)
r <- p$min[1] %+% minutes(5:100)
r
r <- p$min[1] + minutes(5:100)
r
r <- p$min[1] + minutes(5:5:100)
r
r <- p$min[1] + minutes(5:10:100)
r
r <- p$min[1] + minutes(10:100)
r
t <- seq(0, 100, by = 5)
t
r <- p$min[1] + minutes(t)
r
dminutes(p.int)
p.int
duration(p.int)
duration(p.int)
duration(p.int, minutes)
duration(p.int, unit = minutes)
duration(p.int, unit = 'minutes')
p.int%/%minutes(5)
p.int%/%minutes(1)
seq(0:p.int%/%minutes(1), by = 5)
seq(0:(p.int%/%minutes(1)), by = 5)
seq(0:97345, by = 5)
t <- seq(0, int%/%minutes(1), by = 5)
t <- seq(0, p.int%/%minutes(1), by = 5)
t
r <- p$min[1] + minutes(t)
r
r <- p$min[1] + minutes(t)
complete_ts <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)
#currently defaults to five minutes
df.start.end <- df%>%
summarise(start = min(time),
end = min(time))
df.int <- df.start.end$start[1]%--%df.start.end$end[1]
time.points <- int_start(df.int)+minutes(seq(0, df.int, by = 5 ))# 5 minutes
}
complete_ts(prod, time.col = Time)
complete_ts <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)
#currently defaults to five minutes
df.start.end <- df%>%
summarise(start = min(time),
end = min(time))
df.int <- df.start.end$start[1]%--%df.start.end$end[1]
time.points <- int_start(df.int)+minutes(seq(0, df.int%/%mintues(1), by = 5 ))# 5 minutes
}
complete_ts(prod, time.col = Time)
complete_ts <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)
#currently defaults to five minutes
df.start.end <- df%>%
summarise(start = min(time),
end = min(time))
df.int <- df.start.end$start[1]%--%df.start.end$end[1]
time.points <- int_start(df.int)+
minutes(seq(0, df.int%/%minutes(1), by = 5 ))# 5 minutes
}
complete_ts(prod, time.col = Time)
dplyr::setdiff(prod$Time, r)
dplyr::union(prod$Time, r)
dplyr::setdiff(prod$Time, r)
dplyr::setdiff(prod%>%filter(complete.cases(.))%>%$Time, r)
dplyr::setdiff(prod%>%filter(complete.cases(.))%>%selectI(Time), r)
dplyr::setdiff(prod%>%filter(complete.cases(.))%>%select(Time), r)
dplyr::setdiff(prod%>%filter(complete.cases(.))%>%select(Time), data_frame(r))
dplyr::setdiff(prod%>%filter(complete.cases(.))%>%select(Time), data.frame(r))
prod%>%filter(complete.cases(.))
prod%>%filter(complete.cases(.))%>%select(Time)
r
class(r)
dplyr::setdiff(prod$Time, r)
dplyr::setdiff(prod%>%filter(complete.cases(.))%>%select(Time), data.frame(r))
prod%>%filter(complete.cases(.))%>%select(Time)
inspect <- prod%>%filter(complete.cases(.))%>%select(Time)
what <- prod$Time
data_frame(r)
dplyr::setdiff(prod%>%filter(complete.cases(.))%>%select(Time), data_frame(r))
what <- data_frame(r)
dplyr::setdiff(inspect, what)
dplyr::setdiff(inspect, inspect)
what
dplyr::inner_join(inspect, what)
dplyr::inner_join(inspect, what, by.x = "Time", by.y = "r" )
dplyr::inner_join(inspect, what, by = c("Time" = "r") )
dplyr::anti_join(inspect, what, by = c("Time" = "r") )
dplyr::anti_join(what, inspect, by = c("r" = "Time") )
library("ggvis", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
missed <- dplyr::anti_join(what, inspect, by = c("r" = "Time") )
View(missed)
missed%>%ggvis(x = ~r)%>%layer_points()
complete_ts <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)
#currently defaults to five minutes
df.start.end <- df%>%
summarise(start = min(time),
end = min(time))
df.int <- df.start.end$start[1]%--%df.start.end$end[1]
time.points <- int_start(df.int)+
minutes(seq(0, df.int%/%minutes(1), by = 5 ))# 5 minutes
dplyr::anti_join(data_frame(time.points),
df%>%
filter(complete.cases(.))%>%
select(time),
by = c("time.points" = "time"))
}
complete_ts(prod, Time)
library("drrecr", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
remove(complete_ts())
remove(complete_ts)
drrecr::complete_ts(prod, Time)
what <- data_frame(time.points)
time.points
library(drrecr)
drrecr::complete_ts(prod, Time)
time.points
what <- data_frame(time.points)
df%>%filter(complete.cases(.))%>%select(time)
dplyr::anti_join(data_frame(time.points),
dplyr::anti_join(data_frame(time.points),
dplyr::anti_join(data_frame(time.points),
dplyr::anti_join(data_frame(time.points),
dplyr::anti_join(data_frame(time.points),
dplyr::anti_join(data_frame(time.points),
dplyr::anti_join(data_frame(time.points),
dplyr::anti_join(data_frame(time.points),
missed%>%ggvis(x = ~r)%>%layer_points()
size.slide <- input_slider(10, 1000)
missed%>%ggvis(x = ~r)%>%layer_points(size := size.slide)
missed%>%ggvis(x = ~r)%>%layer_points(size := size.slide)
prod%>%mutate(month = month(Time))%>%distinct(month)
prod%>%mutate(month = month(Time, label = TRUE))%>%distinct(month)
prod%>%mutate(month = month(Time, label = TRUE))%>%select(month)%>%distinct(month)
values <- prod%>%mutate(month = month(Time))%>%distinct(month)
input_select(values)
within.day.baseline <- function(dr.event, window){
baseline.int <- (int_start(dr.event$event_interval) - window)%--%
int_start(dr.event$event_interval)
baseline%>%dr.event$energy_data%>%
filter(time %within% int_2hr)%>%
dplyr::arrange(energy)%>%
dplyr::slice(1)
return(baseline)
}
within.day.baseline(dr, hours(2))
within.day.baseline <- function(dr.event, window){
baseline.int <- (int_start(dr.event$event_interval) - window)%--%
int_start(dr.event$event_interval)
baseline<-dr.event$energy_data%>%
filter(time %within% int_2hr)%>%
dplyr::arrange(energy)%>%
dplyr::slice(1)
return(baseline)
}
within.day.baseline(dr, hours(2))
within.day.baseline <- function(dr.event, window){
baseline.int <- (int_start(dr.event$event_interval) - window)%--%
int_start(dr.event$event_interval)
baseline<-dr.event$energy_data%>%
filter(time %within% baseline.int)%>%
dplyr::arrange(energy)%>%
dplyr::slice(1)
return(baseline)
}
within.day.baseline(dr, hours(2))
library(drrecr)
remove(within.day.baseline)
remove(within.day.baseline)
within.day.baseline(dr, hours(2))
baseline.int
dr.event$energy_data
library("knitr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:knitr", unload=TRUE)
library("dplyr", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
library("drrecr", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
library("assertthat", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
library("ggplot2", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
library("ggvis", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
library("knitr", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
library("tidyr", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
eval_event(dr, prod)
eval_event(dr, prod)
