filter(time %within% curtailment_interval)%>%
dplyr::arrange(desc(energy))%>%
dplyr::slice(1)
results.df <- rbind(data_frame(method = "2 hour prior",
value = base_2hr$energy,
event.stamp = base_2hr$time),
data_frame(method = "30 minute prior",
value = base_30min$energy,
event.stamp = base_30min$time),
data_frame(method = "5 minute prior",
value = base_5min$energy,
event.stamp = base_5min$time),
data_frame(method = "10 day average",
value = base_10d$energy,
event.stamp = int_end(curtailment_interval)),
data_frame(method = "Curtailment",
value = curtailment$energy,
event.stamp = curtailment$time))
results = list(df = results.df,
curt_int = curtailment_interval)
plot <- plot_event(event$energy_data, results)
return(plot)
}
plot_event <- function(energy.df, dr_results){
#Generate an interval of the day containing the DR event
event.start <- int_start(dr_results$curt_int)
event.day.start <- ymd_h(paste(year(event.start),
month(event.start),
day(event.start),
0))
event.day <- event.day.start %--% (event.start + days(1))
#Pull methods data.frame
dr_methods <- dr_results$df%>%
group_by(value, event.stamp)%>%
summarise(method = paste(method, collapse = ","))
energy.df%>%
dplyr::filter(time %within% event.day)%>%
ggplot2::ggplot(aes(x = time, y = energy))+
geom_area(alpha = 0.2)+
geom_line()+
geom_hline(data = dr_methods,
aes(yintercept = value),
color = "grey40",
linetype = "dashed")+
geom_point(data = dr_methods,
aes(x = event.stamp, y = value),
color = "grey40")+
geom_text(data = dr_methods,
aes(event.stamp, value,
label = paste(method), hjust = 0, vjust = -0.25))+
scale_x_datetime(expand = c(0,0))+
theme_bw()
}
eval_event(dr, production)
remove(eval_event())
remove(eval_event)
library(drrecr)
library("drrecr", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
eval_event(dr, production)
eval_event(dr, production)
eval_event(dr, production)
eval_event(dr, production)
debug
glm(energy ~ flow, data = debug)
lm(energy ~ flow, data = debug)
lin.model <- lm(energy ~ flow, data = energy.prod.df)
lin.model <- lm(energy ~ flow, data = debug)
lin.model$coefficients$flow
lin.model$coefficients
lin.model$coefficients[2]
coef(lin.model)[2]
coef(lin.model)[2]*2
library(drrecr)
eval_event(dr, production)
eval_event(dr, production)
library(drrecr)
eval_event(dr, production)
eval_event(dr, production)
library(drrecr)
eval_event(dr, production)
library(drrecr)
eval_event(dr, production)
curtailment_day
is.Date(curtailment_day)
eval_event(dr, production)
is.Date(curtailment_day)
class(curtailment_day)
curtailment_day+days(10)
energy.prod.df%>%
dplyr::filter(time %within% (curtailment_day - days(10))%--%curtailment_day)
energy.prod.df%>%
dplyr::filter(time %within% (curtailment_day - days(10))%--%curtailment_day)
eval_event(dr, production)
library(drrecr)
library(drrecr)
eval_event(dr, production)
energy.prod.df%>%filter(time == curtailment_day)
energy.prod.df$time
curtailment_day
production
tail(production)
dr_event(ymd_hm("20150226 844"), hours(3))
dr_event(ymd_hm("20150226 844"), hours(3), energy)
dr_event(ymd_hm("20150226 844"), hours(3), Time)
dr_event(ymd_hm("20150226 844"), hours(3), time)
dr_event(ymd_hm("20150226 844"), hours(3), energy, Time)
dr_event(ymd_hm("20150226 844"), hours(3), energy, Time)
ymd_hm("20150226 844")
ymd_hm("2015/2/26 8:44")
dr_event(ymd_hm("2015/02/26 8:44"), hours(3), energy, Time)
dr <-dr_event(ymd_hm("2015/02/26 8:44"), hours(3), energy, Time)
drrecr::eval_event(dr, production)
energy.prod.df%>%
dplyr::filter(time %within% ((curtailment_day - days(10))%--%curtailment_day))
prod
drrecr::eval_event(dr, prod)
load("~/Documents/R/drrecr/data/prod.rda")
drrecr::eval_event(dr, prod)
View(production)
drrecr::eval_event(dr, production)
energy.prod.df%>%
dplyr::filter(time %within% ((curtailment_day - days(10))%--%curtailment_day - days(1)))%>%
mutate(adj = (curtailment_day.df$flow-flow)*adj.coef,
flow_adj = flow + adj)
curtailment_day
curtailment_day - days(10)
energy.prod.df%>%
dplyr::filter(time %within% ((curtailment_day - days(10))%--%(curtailment_day - days(1))))%>%
mutate(adj = (curtailment_day.df$flow-flow)*adj.coef,
flow_adj = flow + adj)
library(drrecr)
drrecr::eval_event(dr, prod)
drrecr::eval_event(dr, production)
library(drrecr)
drrecr::eval_event(dr, production)
library(drrecr)
drrecr::eval_event(dr, production)
drrecr::eval_event(dr, production)
library(drrecr)
drrecr::eval_event(dr, production)
drrecr::eval_event(dr, production)
View(prod)
drrecr::eval_event(dr, prod)
drrecr::eval_event(dr, prod, copy = TRUE)
drrecr::eval_event(dr, prod)
copy = TRUE
drrecr::eval_event(dr, prod)
remove(prod)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%#hour cutter
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
devtools::use_data(prod)
View(prod)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%#hour cutter
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
devtools::use_data(prod, overwrite = TRUE)
drrecr::eval_event(dr, prod)
drrecr::eval_event(dr, prod)
View(ave_adj)
library(drrecr)
drrecr::eval_event(dr, prod)
drrecr::eval_event(dr, prod)
coef(lin.model)
library(drrecr)
drrecr::eval_event(dr, prod)
energy.prod.df%>%filer(flow < 0)
energy.prod.df%>%filter(flow < 0)
adj.coef <- coef(lin.model)[2] # adjustment coefficient
adj.coef <- coef(lin.model)[2] # adjustment coefficient
adj.coef <- coef(lin.model)[2] # adjustment coefficient
View(prod)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)))%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
devtools::use_data(prod, overwrite = TRUE)
drrecr::eval_event(dr, prod)
View(prod)
View(prod)
remove(prod)
drrecr::eval_event(dr, prod)
load("~/Documents/R/drrecr/data/prod.rda")
drrecr::eval_event(dr, prod)
remove(prod)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)))%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)))%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)))%>%
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)))%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), -Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
devtools::use_data(prod, overwrite = TRUE)
drrecr::eval_event(dr, prod)
library(drrecr)
library("assertthat", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
packrat::restore(prompt = FALSE)
library(caret)
install.packages(caret)
install.packages("caret")
packrat::restore(prompt = FALSE)
remove.packages("BoomSpikeSlab", lib="")
packrat::restore(prompt = FALSE)
install.packages("devtools")
install.packages("lubridate")
packrat::restore(prompt = FALSE)
install.packages("BoomSpikeSlab")
install.packages(bsts)
install.packages("bsts")
devtools::install(CausalImpact)
devtools::install("CausalImpact")
devtools::install_github("google/CausalImpact")
packrat::restore(prompt = FALSE)
remove.packages("CausalImpact", lib="")
remove.packages("brew", lib="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
remove.packages("BoomSpikeSlab", lib="")
remove.packages("BoomSpikeSlab", lib="")
packrat::restore(prompt = FALSE)
install("tidyr")
install.packages("tidyr")
install.packages("knitr")
packrat::restore(prompt = FALSE)
interval <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)%>%
dplyr::mutate(int = (lag(time.col)%--%time.col)/dminutes(1))
}
interval(prod, time)
library("dplyr", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
library(dplyr)
library(assertthat)
library(caret)
library(e1071)
library(tidyr)
interval(prod, time)
interval <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)%>%
dplyr::mutate(int = (lag(time)%--%time)/dminutes(1))
}
interval(prod, time)
prod
energy
interval(energy, Time)
library("lubridate", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
interval(energy, Time)
interval <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)%>%
dplyr::mutate(int = (lag(time)%--%time)/dminutes(1))%>%
dplyr::count(int)
return(df)
}
interval(energy, Time)
interval <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)
time.span <- df%>%
dplyr::summarize(min = min(time),
max = max(time))%>%
dplyr::mutate(min%--%max)
df%>%
dplyr::mutate(int = (lag(time)%--%time)/dminutes(1))%>%
dplyr::count(int)
results <- c(time.span = time.span,
df = df)
return(results)
}
interval(energy, Time)
interval <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)
time.span <- df%>%
dplyr::summarize(min = min(time),
max = max(time))%>%
dplyr::mutate(min%--%max)
df <-df%>%
dplyr::mutate(int = (lag(time)%--%time)/dminutes(1))%>%
dplyr::count(int)
results <- c(time.span = time.span,
df = df)
return(results)
}
interval(energy, Time)
interval <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)
time.span <- df%>%
dplyr::summarize(min = min(time),
max = max(time))%>%
dplyr::transmute(min%--%max)
df <-df%>%
dplyr::mutate(int = (lag(time)%--%time)/dminutes(1))%>%
dplyr::count(int)
results <- c(time.span = time.span,
df = df)
return(results)
}
interval(energy, Time)
library(dplyr)
library(assertthat)
library(caret)
library(e1071)
library(lubridate)
library(tidyr)
ar <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)%>%
gather(meter, energy, -time)%>%
dplyr::group_by(time)%>%
summarise(energy = sum(energy, na.rm = TRUE))%>%
select(-time)
acf(df)
}
ar(energy, Time)
prod
ar(prod, time)
ar(prod, `time`)
acf(prod)
acf(energy)
acf(prod)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), -Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)
View(prod)
acf(prod)
prod
prod$Time
prod$Time%>%mutate(time = myd_hm(time))
prod <- prod%>%mutate(time = myd_hm(time))
detach("package:lubridate", unload=TRUE)
library("lubridate", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
prod <- prod%>%mutate(time = myd_hm(time))
prod <- prod%>%mutate(time = mdy_hm(time))
prod <- prod%>%mutate(time = mdy_hm(time))
prod <- prod%>%mutate(Time = mdy_hm(Time))
prod
acf(prod)
ts(prod)
prod <- as.ts(prod)
acf(prod)
is.ts(prod)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), -Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
mutate(Time = mdy_hm(Time))
acf(prod)
prod%>%filter(!complete.cases(.))
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), -Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
filter(complete.cases(.))%>%
mutate(Time = mdy_hm(Time))
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), -Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
filter(complete.cases(.))%>%
mutate(Time = mdy_hm(Time))
acf(prod)
ts <- xts(prod, Time)
install.packages("xts")
ts <- xts(prod, Time)
library("xts", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
ts <- xts(prod, Time)
xts(energy%>%select(-Time), energy$Time)
ts <- xts(energy%>%select(-Time), energy$Time)
View(ts)
times <- function(df, time.col){
assert_that(is.data.frame(df))
#Does not check that df$time.col is time
time.col <- lazyeval::lazy(time.col)
df <- df%>%
dplyr::rename_(time = time.col)
ts <-xts(df%>%
dplyr::select(-time),
df$time)
}
times(energy, Time)
