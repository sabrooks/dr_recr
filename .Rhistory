energy%>%
rename(time = Time)%>%
mutate(bin = cut(time, breaks = "day"))%>%
group_by(bin)%>%
mutate(time = ymd(bin))%>%
select(-bin)%>%
summarise(energy = sum(energy, na.rm = TRUE))%>%
inner_join(prod, by = "time")
library("lubridate", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
energy%>%
rename(time = Time)%>%
mutate(bin = cut(time, breaks = "day"))%>%
group_by(bin)%>%
mutate(time = ymd(bin))%>%
select(-bin)%>%
summarise(energy = sum(energy, na.rm = TRUE))%>%
inner_join(prod, by = "time")
load("~/Documents/R/drrecr/data/prod.rda")
prod()
prod
View(production)
energy%>%
rename(time = Time)%>%
mutate(bin = cut(time, breaks = "day"))%>%
group_by(bin)%>%
mutate(time = ymd(bin))%>%
select(-bin)%>%
summarise(energy = sum(energy, na.rm = TRUE))%>%
inner_join(production, by = "time")
energy%>%
rename(time = Time)%>%
mutate(bin = cut(time, breaks = "day"))%>%
group_by(bin)%>%
mutate(time = ymd(bin))%>%
select(-bin)%>%
summarise(energy = sum(energy, na.rm = TRUE))
energy%>%
rename(time = Time)%>%
mutate(bin = cut(time, breaks = "day"))%>%
group_by(bin)%>%
mutate(time = ymd(bin))%>%
select(-bin)
energy%>%
rename(time = Time)%>%
mutate(bin = cut(time, breaks = "day"))%>%
group_by(bin)%>%
mutate(time = ymd(bin))%>%
select(-bin)
event <- energy%>%
gather(meter, energy, -time)%>%
group_by(time)%>%
summarise(energy = sum(energy, na.rm = TRUE))
library(dplyr)
library(assertthat)
library(caret)
library(e1071)
library(tidyr)
eval_event <- function(event, prod, grace = minutes(5)){
#Consolidate any sub meters------
event$energy_data <- event$energy_data%>%
gather(meter, energy, -time)%>%
group_by(time)%>%
summarise(energy = sum(energy, na.rm = TRUE))
#Curtailment Interval
curtailment_interval <- (int_start(event$event_interval)+grace)%--%
int_end(event$event_interval)
#Baselines ------------
#10 day average --------
# This approach averages the curtailment period (not an hourly average)
base_10d <- NULL
for(i in 1:10){
base_10d<- event$energy_data%>%
filter(time %within% int_shift(curtailment_interval, -days(i)))%>%
mutate(baseline.day = paste("day", i))%>%
bind_rows(base_10d)
}
base_10d <- base_10d%>%
summarise(energy = mean(energy, na.rm = TRUE))
#10 day adjusted average.
event$energy_data%>%
rename(time = Time)%>%
mutate(bin = cut(time, breaks = "day"))%>%
group_by(bin)%>%
summarise(energy = sum(energy, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
select(-bin)%>%
inner_join(prod, by = "time")
#2hr pre baseline ---------
int_2hr <- (int_start(event$event_interval) - hours(2))%--%
int_start(event$event_interval)
base_2hr <- event$energy_data%>%
filter(time %within% int_2hr)%>%
dplyr::arrange(energy)%>%
dplyr::slice(1)
#30min pre baseline ---------
int_30min <- (int_start(event$event_interval) - minutes(30))%--%
int_start(event$event_interval)
base_30min <- event$energy_data%>%
filter(time %within% int_30min)%>%
dplyr::arrange(energy)%>%
dplyr::slice(1)
#5 min pre baseline ---------
# Possible, but needs granular data.
int_5min <- (int_start(event$event_interval) - minutes(5))%--%
int_start(event$event_interval)
base_5min <- event$energy_data%>%
filter(time %within% int_5min)%>%
dplyr::arrange(energy)%>%
dplyr::slice(1)
#Curtailment max
curtailment <- event$energy_data%>%
filter(time %within% curtailment_interval)%>%
dplyr::arrange(desc(energy))%>%
dplyr::slice(1)
results.df <- rbind(data_frame(method = "2 hour prior",
value = base_2hr$energy,
event.stamp = base_2hr$time),
data_frame(method = "30 minute prior",
value = base_30min$energy,
event.stamp = base_30min$time),
data_frame(method = "5 minute prior",
value = base_5min$energy,
event.stamp = base_5min$time),
data_frame(method = "10 day average",
value = base_10d$energy,
event.stamp = int_end(curtailment_interval)),
data_frame(method = "Curtailment",
value = curtailment$energy,
event.stamp = curtailment$time))
results = list(df = results.df,
curt_int = curtailment_interval)
plot <- plot_event(event$energy_data, results)
return(plot)
}
plot_event <- function(energy.df, dr_results){
#Generate an interval of the day containing the DR event
event.start <- int_start(dr_results$curt_int)
event.day.start <- ymd_h(paste(year(event.start),
month(event.start),
day(event.start),
0))
event.day <- event.day.start %--% (event.start + days(1))
#Pull methods data.frame
dr_methods <- dr_results$df%>%
group_by(value, event.stamp)%>%
summarise(method = paste(method, collapse = ","))
energy.df%>%
dplyr::filter(time %within% event.day)%>%
ggplot2::ggplot(aes(x = time, y = energy))+
geom_area(alpha = 0.2)+
geom_line()+
geom_hline(data = dr_methods,
aes(yintercept = value),
color = "grey40",
linetype = "dashed")+
geom_point(data = dr_methods,
aes(x = event.stamp, y = value),
color = "grey40")+
geom_text(data = dr_methods,
aes(event.stamp, value,
label = paste(method), hjust = 0, vjust = -0.25))+
scale_x_datetime(expand = c(0,0))+
theme_bw()
}
eval_event(dr, production)
library("lubridate", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
eval_event(dr, production)
eval_event <- function(event, prod, grace = minutes(5)){
#Consolidate any sub meters------
event$energy_data <- event$energy_data%>%
gather(meter, energy, -time)%>%
group_by(time)%>%
summarise(energy = sum(energy, na.rm = TRUE))
#Curtailment Interval
curtailment_interval <- (int_start(event$event_interval)+grace)%--%
int_end(event$event_interval)
#Baselines ------------
#10 day average --------
# This approach averages the curtailment period (not an hourly average)
base_10d <- NULL
for(i in 1:10){
base_10d<- event$energy_data%>%
filter(time %within% int_shift(curtailment_interval, -days(i)))%>%
mutate(baseline.day = paste("day", i))%>%
bind_rows(base_10d)
}
base_10d <- base_10d%>%
summarise(energy = mean(energy, na.rm = TRUE))
#10 day adjusted average.
event$energy_data%>%
mutate(bin = cut(time, breaks = "day"))%>%
group_by(bin)%>%
summarise(energy = sum(energy, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
select(-bin)%>%
inner_join(prod, by = "time")
#2hr pre baseline ---------
int_2hr <- (int_start(event$event_interval) - hours(2))%--%
int_start(event$event_interval)
base_2hr <- event$energy_data%>%
filter(time %within% int_2hr)%>%
dplyr::arrange(energy)%>%
dplyr::slice(1)
#30min pre baseline ---------
int_30min <- (int_start(event$event_interval) - minutes(30))%--%
int_start(event$event_interval)
base_30min <- event$energy_data%>%
filter(time %within% int_30min)%>%
dplyr::arrange(energy)%>%
dplyr::slice(1)
#5 min pre baseline ---------
# Possible, but needs granular data.
int_5min <- (int_start(event$event_interval) - minutes(5))%--%
int_start(event$event_interval)
base_5min <- event$energy_data%>%
filter(time %within% int_5min)%>%
dplyr::arrange(energy)%>%
dplyr::slice(1)
#Curtailment max
curtailment <- event$energy_data%>%
filter(time %within% curtailment_interval)%>%
dplyr::arrange(desc(energy))%>%
dplyr::slice(1)
results.df <- rbind(data_frame(method = "2 hour prior",
value = base_2hr$energy,
event.stamp = base_2hr$time),
data_frame(method = "30 minute prior",
value = base_30min$energy,
event.stamp = base_30min$time),
data_frame(method = "5 minute prior",
value = base_5min$energy,
event.stamp = base_5min$time),
data_frame(method = "10 day average",
value = base_10d$energy,
event.stamp = int_end(curtailment_interval)),
data_frame(method = "Curtailment",
value = curtailment$energy,
event.stamp = curtailment$time))
results = list(df = results.df,
curt_int = curtailment_interval)
plot <- plot_event(event$energy_data, results)
return(plot)
}
plot_event <- function(energy.df, dr_results){
#Generate an interval of the day containing the DR event
event.start <- int_start(dr_results$curt_int)
event.day.start <- ymd_h(paste(year(event.start),
month(event.start),
day(event.start),
0))
event.day <- event.day.start %--% (event.start + days(1))
#Pull methods data.frame
dr_methods <- dr_results$df%>%
group_by(value, event.stamp)%>%
summarise(method = paste(method, collapse = ","))
energy.df%>%
dplyr::filter(time %within% event.day)%>%
ggplot2::ggplot(aes(x = time, y = energy))+
geom_area(alpha = 0.2)+
geom_line()+
geom_hline(data = dr_methods,
aes(yintercept = value),
color = "grey40",
linetype = "dashed")+
geom_point(data = dr_methods,
aes(x = event.stamp, y = value),
color = "grey40")+
geom_text(data = dr_methods,
aes(event.stamp, value,
label = paste(method), hjust = 0, vjust = -0.25))+
scale_x_datetime(expand = c(0,0))+
theme_bw()
}
eval_event(dr, production)
remove(eval_event())
remove(eval_event)
library(drrecr)
library("drrecr", lib.loc="~/Documents/R/drrecr/packrat/lib/x86_64-pc-linux-gnu/3.2.0")
eval_event(dr, production)
eval_event(dr, production)
eval_event(dr, production)
eval_event(dr, production)
debug
glm(energy ~ flow, data = debug)
lm(energy ~ flow, data = debug)
lin.model <- lm(energy ~ flow, data = energy.prod.df)
lin.model <- lm(energy ~ flow, data = debug)
lin.model$coefficients$flow
lin.model$coefficients
lin.model$coefficients[2]
coef(lin.model)[2]
coef(lin.model)[2]*2
library(drrecr)
eval_event(dr, production)
eval_event(dr, production)
library(drrecr)
eval_event(dr, production)
eval_event(dr, production)
library(drrecr)
eval_event(dr, production)
library(drrecr)
eval_event(dr, production)
curtailment_day
is.Date(curtailment_day)
eval_event(dr, production)
is.Date(curtailment_day)
class(curtailment_day)
curtailment_day+days(10)
energy.prod.df%>%
dplyr::filter(time %within% (curtailment_day - days(10))%--%curtailment_day)
energy.prod.df%>%
dplyr::filter(time %within% (curtailment_day - days(10))%--%curtailment_day)
eval_event(dr, production)
library(drrecr)
library(drrecr)
eval_event(dr, production)
energy.prod.df%>%filter(time == curtailment_day)
energy.prod.df$time
curtailment_day
production
tail(production)
dr_event(ymd_hm("20150226 844"), hours(3))
dr_event(ymd_hm("20150226 844"), hours(3), energy)
dr_event(ymd_hm("20150226 844"), hours(3), Time)
dr_event(ymd_hm("20150226 844"), hours(3), time)
dr_event(ymd_hm("20150226 844"), hours(3), energy, Time)
dr_event(ymd_hm("20150226 844"), hours(3), energy, Time)
ymd_hm("20150226 844")
ymd_hm("2015/2/26 8:44")
dr_event(ymd_hm("2015/02/26 8:44"), hours(3), energy, Time)
dr <-dr_event(ymd_hm("2015/02/26 8:44"), hours(3), energy, Time)
drrecr::eval_event(dr, production)
energy.prod.df%>%
dplyr::filter(time %within% ((curtailment_day - days(10))%--%curtailment_day))
prod
drrecr::eval_event(dr, prod)
load("~/Documents/R/drrecr/data/prod.rda")
drrecr::eval_event(dr, prod)
View(production)
drrecr::eval_event(dr, production)
energy.prod.df%>%
dplyr::filter(time %within% ((curtailment_day - days(10))%--%curtailment_day - days(1)))%>%
mutate(adj = (curtailment_day.df$flow-flow)*adj.coef,
flow_adj = flow + adj)
curtailment_day
curtailment_day - days(10)
energy.prod.df%>%
dplyr::filter(time %within% ((curtailment_day - days(10))%--%(curtailment_day - days(1))))%>%
mutate(adj = (curtailment_day.df$flow-flow)*adj.coef,
flow_adj = flow + adj)
library(drrecr)
drrecr::eval_event(dr, prod)
drrecr::eval_event(dr, production)
library(drrecr)
drrecr::eval_event(dr, production)
library(drrecr)
drrecr::eval_event(dr, production)
drrecr::eval_event(dr, production)
library(drrecr)
drrecr::eval_event(dr, production)
drrecr::eval_event(dr, production)
View(prod)
drrecr::eval_event(dr, prod)
drrecr::eval_event(dr, prod, copy = TRUE)
drrecr::eval_event(dr, prod)
copy = TRUE
drrecr::eval_event(dr, prod)
remove(prod)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%#hour cutter
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
devtools::use_data(prod)
View(prod)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%#hour cutter
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
devtools::use_data(prod, overwrite = TRUE)
drrecr::eval_event(dr, prod)
drrecr::eval_event(dr, prod)
View(ave_adj)
library(drrecr)
drrecr::eval_event(dr, prod)
drrecr::eval_event(dr, prod)
coef(lin.model)
library(drrecr)
drrecr::eval_event(dr, prod)
energy.prod.df%>%filer(flow < 0)
energy.prod.df%>%filter(flow < 0)
adj.coef <- coef(lin.model)[2] # adjustment coefficient
adj.coef <- coef(lin.model)[2] # adjustment coefficient
adj.coef <- coef(lin.model)[2] # adjustment coefficient
View(prod)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)))%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
devtools::use_data(prod, overwrite = TRUE)
drrecr::eval_event(dr, prod)
View(prod)
View(prod)
remove(prod)
drrecr::eval_event(dr, prod)
load("~/Documents/R/drrecr/data/prod.rda")
drrecr::eval_event(dr, prod)
remove(prod)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)))%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)))%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)))%>%
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)))%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
prod <- read.csv("~/prod.data.csv")%>%
dplyr::select(Time.Stamp:D_UV2FLOW_ACC)%>%
rename(Time = Time.Stamp)%>%
mutate_each(., funs(.-lag(.)), -Time)%>%
mutate_each(., funs(ifelse(. < 0, 0,.)), -Time)%>%
mutate_each(., funs(ifelse(. == max(., na.rm = TRUE), 0,.)), -Time)%>%
slice(-1)%>%
gather(meter, flow, -Time)%>%
mutate(Time = mdy_hm(Time),
bin = cut(Time, breaks = "day"))%>%
dplyr::select(-Time)%>%
group_by(bin)%>%
summarise(flow = sum(flow, na.rm = TRUE))%>%
mutate(time = ymd(bin))%>%
dplyr::select(-bin)
devtools::use_data(prod, overwrite = TRUE)
drrecr::eval_event(dr, prod)
library(drrecr)
